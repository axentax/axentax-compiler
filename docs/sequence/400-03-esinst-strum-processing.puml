@startuml esinst-strum-processing
title ESInst ストラム処理シーケンス

participant "ResolveStrum" as RS
participant "TabObj" as TO
participant "Styles" as ST
participant "ESInst" as ESI
participant "Conduct" as C

note over RS: ストラム処理でのESInst適用

RS -> RS: resolve(conduct, mixes)
activate RS

note right of RS: ストラム効果の生成と楽器音色設定

loop flatTOListの各TabObj
    RS -> TO: ストラムスタイルの確認
    activate TO
    
    alt ストラムスタイルが存在する場合
        TO --> RS: StyleStrum
        
        note right of RS: ストラムノートの作成処理
        RS -> RS: core(conduct, flatTOList, marks, to, ti, strum)
        activate RS
        
        note right of RS: コード情報からストラムノート生成
        RS -> RS: createStrumNotes(conduct, to, strumInfo)
        activate RS
        
        note right of RS: 各フレットごとのストラムノート作成
        loop コードフィンガリングの各フレット
            RS -> RS: 新しいTabObjの作成
            RS -> RS: strumTabObj = new TabObj()
            
            note right of RS: ストラム用ESInst設定
            RS -> ST: strumTabObj.styles.inst = ESInst.normal
            activate ST
            note right of ST: 一旦normalで運用\n（将来的にstrumに変更予定）
            ST --> RS: 楽器音色設定完了
            deactivate ST
            
            RS -> RS: タイミングとピッチの設定
            RS -> RS: ベロシティとエクスプレッションの調整
            note right of RS: ストラム特有の音量カーブ適用
        end
        
        RS --> RS: ストラムノートリスト作成完了
        deactivate RS
        
        note right of RS: 原ノートの楽器音色調整
        alt 原ノートがストラム対象の場合
            RS -> TO: 原ノートの音量調整
            RS -> TO: ストラムフラグの設定
            note right of TO: 原ノートは背景音として制御
        end
        
        note right of RS: ストラムノートの挿入
        RS -> C: flatTOList.splice(ti + 1, 0, ...strumTabObjList)
        
        RS --> RS: ストラム処理完了
        deactivate RS
    else ストラムスタイルが存在しない場合
        TO --> RS: スタイルなし
        note right of RS: ストラム処理をスキップ
    end
    
    deactivate TO
end

RS --> C: 全ストラム処理完了
deactivate RS

note over RS: ストラム処理でのESInst使用パターン

note right of RS
    **ストラム楽器音色パターン**
    
    現在の実装:
    strumTabObj.styles.inst = ESInst.normal
    
    将来の予定:
    strumTabObj.styles.inst = ESInst.strum
    
    特徴:
    - ストラムノートは全てnormal音色で統一
    - 原ノートとストラムノートの音色は分離
    - 音量カーブでストラム表現を実現
    - MIDIトラックでの音色制御は保留
end note

note left of RS
    **ストラムタイミング制御**
    
    ストラム内での楽器音色効果:
    - ESInst.normal: 標準的なストラム音
    - 音量カーブによる自然なストローク表現
    - 各弦の発音タイミングの微調整
    - コードフィンガリングに基づく音の分離
end note


note over RS, ESI: ストラム処理のESInst特徴\n- 現在は全てESInst.normalを使用\n- 将来的にESInst.strumへの移行予定\n- 音量カーブでストラム表現を実現\n- 原ノートとストラムノートの音色分離

@enduml