import { Conduct } from '../interface/conduct';
import { SimpleResult } from '../interface/utils.response.interface';

/**
 * スタイルコンパイラークラス
 *
 * 音楽的表現（エフェクト、アーティキュレーション等）を処理し、
 * 実際の演奏データに変換する。各種スタイル処理を順序立てて実行する。
 *
 * 処理されるスタイル：
 * - レガート（音の連結）：音と音の間を滑らかに繋ぐ演奏技法
 * - スタッカート（音の分離）：音を短く切って演奏する技法
 * - スライド（音程の滑らかな変化）：フレット間を滑らかに移動する技法
 * - アプローチ（音程への接近）：目標音程に向かって滑らかに接近する技法
 * - ベンド（音程の変化）：弦を曲げて音程を変化させる技法
 * - ストラム（コード奏法）：複数の弦を同時に弾く技法
 * - ストローク（ピッキングパターン）：上下のピッキングパターン
 * - ディレイ（音の遅延）：音の遅延効果を実現
 * - ミュートノイズ（ミュート音）：弦をミュートした音を実現
 *
 * このクラスは、記譜法で指定された音楽的表現を
 * 実際の演奏データ（MIDI、タブ譜）に変換する中心的な役割を担う
 */
export declare class CompileStyle {
    /**
     * スタイル処理のメインコンパイル処理
     *
     * 記譜法で指定された音楽的表現を実際の演奏データに変換する
     * 各段階でエラーが発生した場合は即座に処理を中断してエラーを返す
     *
     * 処理順序：
     * 1. BPM解析・時間計算：テンポ情報の解析と時間計算
     * 2. クリック音処理：メトロノーム音の生成
     * 3. 各dual毎のスタイル処理（レガート、スタッカート、スライド等）
     *
     * スタイル処理の順序は、音楽理論と演奏技法に基づいて
     * 最適な演奏表現を実現するように設計されている
     *
     * @param conduct 演奏情報オブジェクト
     * @returns コンパイル結果
     */
    static compile(conduct: Conduct): SimpleResult;
}
